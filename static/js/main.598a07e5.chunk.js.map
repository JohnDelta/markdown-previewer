{"version":3,"sources":["Editor.js","Previewer.js","TabLinks.js","App.js","serviceWorker.js","index.js"],"names":["Editor","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","editorText","target","value","marked","state","bind","assertThisInitialized","react_default","a","createElement","className","id","onChange","React","Component","Previewer","text","markedText","TabLinks","openTab","openedTab","document","getElementById","style","display","opacity","title","onClick","App","src_TabLinks","src_Editor","src_Previewer","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.598a07e5.chunk.js","sourcesContent":["import React from 'react';\r\nimport marked from 'marked';\r\n\r\nclass Editor extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\teditorText : \"default value\"\r\n\t\t};\r\n\t\t\r\n\t\tthis.handleChange = this.handleChange.bind(this);\r\n\t}\r\n\t\r\n\thandleChange = (e) => {\r\n\t\tthis.setState({\r\n\t\t\teditorText : e.target.value\r\n\t\t});\r\n\t\t\r\n\t\t// transfer the result to parent\r\n\t\tthis.props.handleChange(marked(this.state.editorText));\r\n\t};\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"Panel Editor\" id=\"Editor\">\r\n\t\t\t\t<textarea\r\n\t\t\t\t\tid=\"EditorTextArea\"\r\n\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\tvalue={this.state.editorText}\r\n\t\t\t\t\t>\r\n\t\t\t\t</textarea>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Editor;","import React from 'react';\r\n\r\nclass Previewer extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\ttext : this.props.markedText\r\n\t\t};\r\n\t}\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"Panel Previewer\" id=\"Previewer\">\r\n\t\t\t\t<textarea\r\n\t\t\t\t\tid=\"PreviewerTextArea\"\r\n\t\t\t\t\tvalue={this.state.text}\r\n\t\t\t\t\t>\r\n\t\t\t\t</textarea>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Previewer;","import React from 'react';\r\n\r\nclass TabLinks extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\topenedTab : \"\"\r\n\t\t};\r\n\t\tthis.openTab = this.openTab.bind(this);\r\n\t}\r\n\t\r\n\tcomponentWillMount() {\r\n\t\tthis.setState({\r\n\t\t\topenedTab : \"Editor\"\r\n\t\t});\r\n\t}\r\n\r\n\topenTab = (e) => {\r\n\t\tif(e.target.id === \"EditorBtn\" && this.state.openedTab !== \"Editor\") {\r\n\t\t\tdocument.getElementById(\"Editor\").style.display = \"flex\";\r\n\t\t\tdocument.getElementById(\"EditorBtn\").style.opacity = \"1\";\r\n\t\t\tdocument.getElementById(\"Previewer\").style.display = \"none\";\r\n\t\t\tdocument.getElementById(\"PreviewerBtn\").style.opacity = \"0.5\";\r\n\t\t\tthis.setState({\r\n\t\t\t\topenedTab : \"Editor\"\r\n\t\t\t});\r\n\t\t} else if (e.target.id === \"PreviewerBtn\" && this.state.openedTab !== \"Previewer\") {\r\n\t\t\tdocument.getElementById(\"Previewer\").style.display = \"flex\";\r\n\t\t\tdocument.getElementById(\"PreviewerBtn\").style.opacity = \"1\";\r\n\t\t\tdocument.getElementById(\"Editor\").style.display = \"none\";\r\n\t\t\tdocument.getElementById(\"EditorBtn\").style.opacity = \"0.5\";\r\n\t\t\tthis.setState({\r\n\t\t\t\topenedTab : \"Previewer\"\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"TabLinks\">\r\n\t\t\t\t<button \r\n\t\t\t\t\tclassName=\"option-tab option-tab-editor\" \r\n\t\t\t\t\ttitle=\"Open editor\"\r\n\t\t\t\t\tonClick={this.openTab}\r\n\t\t\t\t\tid=\"EditorBtn\">\r\n\t\t\t\t\t<i className=\"fa fa-edit\"></i> Editor\r\n\t\t\t\t</button>\r\n\t\t\t\t<button \r\n\t\t\t\t\tclassName=\"option-tab option-tab-previewer\" \r\n\t\t\t\t\ttitle=\"Open previewer\"\r\n\t\t\t\t\tonClick={this.openTab}\r\n\t\t\t\t\tid=\"PreviewerBtn\">\r\n\t\t\t\t\t<i className=\"fa fa-eye\"></i> Previewer\r\n\t\t\t\t</button>\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName=\"info-option option-tab\"\r\n\t\t\t\t\ttitle=\"How to write\">\r\n\t\t\t\t\t<i className=\"fa fa-info-circle\"></i>\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default TabLinks;","import React from 'react';\nimport './App.css';\nimport Editor from './Editor.js';\nimport Previewer from './Previewer.js';\nimport TabLinks from './TabLinks.js';\n\nclass App extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tmarkedText : \"\"\n\t\t};\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t}\n\t\n\t/*\n\t\tUsed by the children 'Editor' to send the result here, so it can be\n\t\tsend back to previewer panel\n\t*/\n\thandleChange = (e) => {\n\t\tthis.setState({\n\t\t\tmarkedText : e\n\t\t});\n\t};\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<header>\n\t\t\t\t\t<TabLinks />\n\t\t\t\t</header>\n\t\t\t\t<main>\n\t\t\t\t\t<Editor handleChange={this.handleChange}/>\n\t\t\t\t\t<Previewer markedText={this.markedText}/>\n\t\t\t\t</main>\n\t\t\t\t<footer>\n\t\t\t\t\t<a \n\t\t\t\t\t\thref=\"https://github.com/JohnDelta\"\n\t\t\t\t\t\trel=\"noopener noreferrer\"\n\t\t\t\t\t\ttarget=\"_blank\" \n\t\t\t\t\t\ttitle=\"visit my site!\">\n\t\t\t\t\t\tBy John Delta\n\t\t\t\t\t</a>\n\t\t\t\t</footer>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}